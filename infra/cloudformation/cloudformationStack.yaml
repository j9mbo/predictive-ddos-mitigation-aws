AWSTemplateFormatVersion: '2010-09-09'
Description: Juice Shop on ECS Fargate behind ALB + CloudFront + WAF (deploy in us-east-1). CloudFront logs to S3 with ACLs enabled.

Parameters:
  StackNamePrefix:
    Type: String
    Default: juice-ecs
  ContainerImage:
    Type: String
    Default: bkimminich/juice-shop:latest
  DesiredCount:
    Type: Number
    Default: 1
  Cpu:
    Type: Number
    Default: 256
  Memory:
    Type: Number
    Default: 512

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.42.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true

  IGW:
    Type: AWS::EC2::InternetGateway

  AttachIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.42.0.0/20
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.42.16.0/20
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  Route0:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  AssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRT

  AssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRT

  AlbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ServiceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS service SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref AlbSG

  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::AccountId}-${StackNamePrefix}-logs-${AWS::Region}'
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${StackNamePrefix}-cluster'

  ExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: ecs-tasks.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: ecs-tasks.amazonaws.com }
            Action: sts:AssumeRole

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${StackNamePrefix}-task'
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt ExecRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      RuntimePlatform:
        OperatingSystemFamily: LINUX
        CpuArchitecture: X86_64
      ContainerDefinitions:
        - Name: juice
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Essential: true
          Environment:
            - Name: NODE_ENV
              Value: production

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      Subnets: [!Ref PublicSubnetA, !Ref PublicSubnetB]
      SecurityGroups: [!Ref AlbSG]

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /
      Matcher: { HttpCode: '200-399' }

  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  Service:
    Type: AWS::ECS::Service
    DependsOn: AlbListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [!Ref ServiceSG]
          Subnets: [!Ref PublicSubnetA, !Ref PublicSubnetB]
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: juice
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup

  WAFWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub '${StackNamePrefix}-web-acl'
      Scope: CLOUDFRONT
      DefaultAction: { Allow: {} }
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: !Sub '${StackNamePrefix}-waf'
        SampledRequestsEnabled: true
      Rules:
        - Name: BaseRateLimit
          Priority: 1
          Statement:
            RateBasedStatement:
              AggregateKeyType: IP
              Limit: 2000
          Action: { Block: {} }
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${StackNamePrefix}-waf-rate'
            SampledRequestsEnabled: true

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub '${StackNamePrefix} CloudFront -> ALB -> ECS(Fargate)'
        DefaultCacheBehavior:
          TargetOriginId: alb-origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: true
            Cookies: { Forward: all }
        Origins:
          - Id: alb-origin
            DomainName: !GetAtt ALB.DNSName
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        Logging:
          Bucket: !Sub '${LogsBucket}.s3.amazonaws.com'
          Prefix: cloudfront
          IncludeCookies: false
        DefaultRootObject: index.html
        PriceClass: PriceClass_100
        WebACLId: !GetAtt WAFWebACL.Arn

  # --- S3 bucket for WAF logs ---
  WAFLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::AccountId}-${StackNamePrefix}-waf-logs-${AWS::Region}'
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  # --- IAM role for Firehose to write into S3 ---
  FirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: firehose.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowS3Delivery
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${WAFLogsBucket}'
                  - !Sub 'arn:${AWS::Partition}:s3:::${WAFLogsBucket}/*'

  # --- Kinesis Data Firehose stream (DirectPut -> S3) for WAF logs ---
  WAFLogsDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub 'aws-waf-logs-${StackNamePrefix}'
      DeliveryStreamType: DirectPut
      S3DestinationConfiguration:
        BucketARN: !Sub 'arn:${AWS::Partition}:s3:::${WAFLogsBucket}'
        RoleARN: !GetAtt FirehoseRole.Arn
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
        CompressionFormat: GZIP
        Prefix: 'year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/'
        ErrorOutputPrefix: 'errors/!{firehose:error-output-type}/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/'

  # --- Attach WAF logging to the existing WebACL (global, us-east-1) ---
  WAFLoggingConfiguration:
    Type: AWS::WAFv2::LoggingConfiguration
    DependsOn:
      - WAFLogsDeliveryStream
    Properties:
      ResourceArn: !GetAtt WAFWebACL.Arn
      LogDestinationConfigs:
        - !GetAtt WAFLogsDeliveryStream.Arn
      RedactedFields:
        - SingleHeader: { Name: 'authorization' }
        - SingleHeader: { Name: 'cookie' }

Outputs:
  CloudFrontDomain:
    Description: Public domain of CloudFront distribution
    Value: !GetAtt Distribution.DomainName
  ALBDNSName:
    Description: Public DNS of ALB (origin)
    Value: !GetAtt ALB.DNSName
  LogsBucketName:
    Description: S3 bucket for CloudFront access logs
    Value: !Ref LogsBucket
  ECSClusterName:
    Description: ECS cluster
    Value: !Ref ECSCluster
  ECSServiceName:
    Description: ECS service name
    Value: !Ref Service
