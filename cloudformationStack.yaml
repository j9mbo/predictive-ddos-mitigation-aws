AWSTemplateFormatVersion: '2010-09-09'
Description: Juice Shop on ECS Fargate behind ALB + CloudFront + WAF (CloudFront logs with ACL fix). Deploy in us-east-1.

Parameters:
  StackNamePrefix:
    Type: String
    Default: juice-ecs
  ContainerImage:
    Type: String
    Default: bkimminich/juice-shop:latest
  DesiredCount:
    Type: Number
    Default: 1
  Cpu:
    Type: Number
    Default: 256
  Memory:
    Type: Number
    Default: 512

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.42.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${StackNamePrefix}-vpc'

  IGW:
    Type: AWS::EC2::InternetGateway

  AttachIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.42.0.0/20
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${StackNamePrefix}-public-a'

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.42.16.0/20
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${StackNamePrefix}-public-b'

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  Route0:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  AssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRT

  AssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRT

  AlbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${StackNamePrefix}-alb-sg'

  ServiceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS service SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref AlbSG
      Tags:
        - Key: Name
          Value: !Sub '${StackNamePrefix}-svc-sg'

  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::AccountId}-${StackNamePrefix}-logs-${AWS::Region}'
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred     # дозволяє ACL для CloudFront logs
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub '${StackNamePrefix}-logs'

  LogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: CloudFrontStandardLogsDelivery
            Effect: Allow
            Principal:
              Service: delivery.logs.cloudfront.amazonaws.com
            Action: 's3:PutObject'
            Resource: !Sub 'arn:${AWS::Partition}:s3:::${LogsBucket}/cloudfront/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': 'bucket-owner-full-control'

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${StackNamePrefix}-cluster'

  ExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${StackNamePrefix}-ecs-exec-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: ecs-tasks.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${StackNamePrefix}-ecs-task-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: ecs-tasks.amazonaws.com }
            Action: sts:AssumeRole

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${StackNamePrefix}-task'
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt ExecRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      RuntimePlatform:
        OperatingSystemFamily: LINUX
        CpuArchitecture: X86_64
      ContainerDefinitions:
        - Name: juice
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Essential: true
          Environment:
            - Name: NODE_ENV
              Value: production

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      Subnets: [!Ref PublicSubnetA, !Ref PublicSubnetB]
      SecurityGroups: [!Ref AlbSG]

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /
      Matcher: { HttpCode: '200-399' }

  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  Service:
    Type: AWS::ECS::Service
    DependsOn: AlbListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [!Ref ServiceSG]
          Subnets: [!Ref PublicSubnetA, !Ref PublicSubnetB]
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: juice
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup
      ServiceName: !Sub '${StackNamePrefix}-svc'

  WAFWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub '${StackNamePrefix}-web-acl'
      Scope: CLOUDFRONT                        # обов'язково розгортати в us-east-1
      DefaultAction: { Allow: {} }
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: !Sub '${StackNamePrefix}-waf'
        SampledRequestsEnabled: true
      Rules:
        - Name: BaseRateLimit
          Priority: 1
          Statement:
            RateBasedStatement:
              AggregateKeyType: IP
              Limit: 2000
          Action: { Block: {} }
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${StackNamePrefix}-waf-rate'
            SampledRequestsEnabled: true

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub '${StackNamePrefix} CloudFront -> ALB -> ECS(Fargate)'
        DefaultCacheBehavior:
          TargetOriginId: alb-origin
          ViewerProtocolPolicy: redirect-to-HTTPS
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: true
            Cookies: { Forward: all }
        Origins:
          - Id: alb-origin
            DomainName: !GetAtt ALB.DNSName
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        Logging:
          Bucket: !Sub '${LogsBucket}.s3.amazonaws.com'
          Prefix: cloudfront
          IncludeCookies: false
        DefaultRootObject: index.html
        PriceClass: PriceClass_100
        WebACLId: !GetAtt WAFWebACL.Arn

Outputs:
  CloudFrontDomain:
    Description: Public domain of CloudFront distribution
    Value: !GetAtt Distribution.DomainName
  ALBDNSName:
    Description: Public DNS of ALB (origin). Later you can restrict direct access.
    Value: !GetAtt ALB.DNSName
  LogsBucketName:
    Description: S3 bucket for CloudFront access logs
    Value: !Ref LogsBucket
  ECSClusterName:
    Description: ECS cluster
    Value: !Ref ECSCluster
  ECSServiceName:
    Description: ECS service name
    Value: !GetAtt Service.ServiceName
